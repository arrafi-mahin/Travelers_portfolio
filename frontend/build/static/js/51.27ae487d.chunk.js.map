{"version":3,"file":"static/js/51.27ae487d.chunk.js","mappings":"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","sources":["Places/Pages/NewPlace.js","Shared/Components/FormElements/ImageUpload.js"],"sourcesContent":["import React, { Fragment, useContext } from \"react\";\r\nimport Input from \"../../Shared/Components/FormElements/Input\";\r\nimport Button from \"../../Shared/Components/FormElements/Button\";\r\nimport ImageUpload from \"../../Shared/Components/FormElements/ImageUpload\";\r\nimport {\r\n  VALIDATOR_REQUIRE,\r\n  VALIDATOR_MINLENGTH,\r\n} from \"../../Shared/Util/Validators\";\r\nimport { AuthContext } from \"../../Shared/Context/Auth-context\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport ErrorModal from \"../../Shared/Components/UIElements/ErrorModal\";\r\nimport LoadingSpinner from \"../../Shared/Components/UIElements/LoadingSpinner\";\r\nimport { useForm } from \"../../Shared/hooks/form-hook\";\r\nimport { useHttpClient } from \"../../Shared/hooks/http-hook\";\r\nimport \"./placeForm.css\";\r\n\r\nfunction NewPlace(props) {\r\n  const auth = useContext(AuthContext);\r\n  const { isLoading, sendRequest, error, clearError } = useHttpClient();\r\n  const [formState, inputHandler] = useForm(\r\n    {\r\n      title: {\r\n        value: \"\",\r\n        isValid: false,\r\n      },\r\n      description: {\r\n        value: \"\",\r\n        isValid: false,\r\n      },\r\n      address: {\r\n        value: \"\",\r\n        isValid: false,\r\n      },\r\n      image: {\r\n        value: null,\r\n        isValid: false,\r\n      },\r\n    },\r\n    false\r\n  );\r\n  const navigate = useNavigate();\r\n  const placeSubmitHandler = async (e) => {\r\n    e.preventDefault();\r\n    try {\r\n      const formData = new FormData();\r\n      formData.append(\"title\", formState.inputs.title.value);\r\n      formData.append(\"description\", formState.inputs.description.value);\r\n      formData.append(\"address\", formState.inputs.address.value);\r\n      formData.append(\"image\", formState.inputs.image.value);\r\n      // formData.append(\"location\", location);\r\n      await sendRequest(process.env.REACT_APP_BACKEND_URL +\"/places/\", \"POST\", formData, {\r\n        authorization: \"Bearer \" + auth.token,\r\n      });\r\n      //Redirect user to different page\r\n      navigate(\"/\");\r\n    } catch (err) {}\r\n  };\r\n  return (\r\n    <Fragment>\r\n      <ErrorModal error={error} onClear={clearError} />\r\n      <form className=\"place-form\" onSubmit={placeSubmitHandler}>\r\n        {isLoading && <LoadingSpinner asOverlay />}\r\n        <Input\r\n          id=\"title\"\r\n          element=\"input\"\r\n          type=\"text\"\r\n          label=\"title\"\r\n          validators={[VALIDATOR_REQUIRE()]}\r\n          errorText=\"Please Enter a valid Title.\"\r\n          onInput={inputHandler}\r\n        />\r\n        <Input\r\n          id=\"description\"\r\n          element=\"textarea\"\r\n          label=\"description\"\r\n          validators={[VALIDATOR_MINLENGTH(5)]}\r\n          errorText=\"Please Enter a valid description (Minimum 5 charecter).\"\r\n          onInput={inputHandler}\r\n        />\r\n        <Input\r\n          id=\"address\"\r\n          element=\"input\"\r\n          label=\"Address\"\r\n          validators={[VALIDATOR_REQUIRE()]}\r\n          errorText=\"Please Enter a valid Address.\"\r\n          onInput={inputHandler}\r\n        />\r\n        <ImageUpload\r\n          id=\"image\"\r\n          onInput={inputHandler}\r\n          errorText=\"Please Provide an image.\"\r\n        />\r\n        <Button type=\"submit\" disabled={!formState.isValid}>\r\n          ADD PLACE\r\n        </Button>\r\n      </form>\r\n    </Fragment>\r\n  );\r\n}\r\n\r\nexport default NewPlace;\r\n","import React, { useEffect, useRef, useState } from \"react\";\r\nimport Button from \"./Button\";\r\nimport \"./ImageUpload.css\";\r\nfunction ImageUpload(props) {\r\n  const [file, setFile] = useState();\r\n  const [previewUrl, setPreviewUrl] = useState();\r\n  const [isValid, setIsValid] = useState(false);\r\n  const pickedHandler = (event) => {\r\n    let pickedFile;\r\n    let fileIsValid = isValid;\r\n    if (event.target.files && event.target.files.length === 1) {\r\n      pickedFile = event.target.files[0];\r\n      setFile(pickedFile);\r\n      setIsValid(true);\r\n      fileIsValid = true;\r\n    } else {\r\n      setIsValid(false);\r\n      fileIsValid = false;\r\n    }\r\n    props.onInput(props.id, pickedFile, fileIsValid);\r\n  };\r\n  const filePickerRef = useRef();\r\n  useEffect(() => {\r\n    if (!file) {\r\n      return;\r\n    }\r\n    const fileReader = new FileReader();\r\n    fileReader.onload = () => {\r\n      setPreviewUrl(fileReader.result);\r\n    };\r\n    fileReader.readAsDataURL(file);\r\n  }, [file]);\r\n\r\n  const pickImageHandler = () => {\r\n    filePickerRef.current.click();\r\n  };\r\n  return (\r\n    <div className=\"form-control\">\r\n      <input\r\n        type=\"file\"\r\n        id={props.id}\r\n        ref={filePickerRef}\r\n        style={{ display: \"none\" }}\r\n        accept=\".jpg,.png,.jpeg\"\r\n        onChange={pickedHandler}\r\n      />\r\n      <div className={`image-upload ${props.center && \"center\"}`}>\r\n        <div className=\"image-upload__preview\">\r\n          {previewUrl && <img src={previewUrl} alt=\"Preview\" />}\r\n          {!previewUrl && <p>Please pick an image.</p>}\r\n        </div>\r\n        <Button type=\"button\" onClick={pickImageHandler}>\r\n          PICK IMAGE\r\n        </Button>\r\n      </div>\r\n      {!isValid && <p> {props.errorText}</p>}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ImageUpload;\r\n"],"names":["props","auth","useContext","AuthContext","useHttpClient","isLoading","sendRequest","error","clearError","useForm","title","value","isValid","description","address","image","formState","inputHandler","navigate","useNavigate","placeSubmitHandler","e","preventDefault","formData","FormData","append","inputs","process","authorization","token","Fragment","onClear","className","onSubmit","asOverlay","id","element","type","label","validators","VALIDATOR_REQUIRE","errorText","onInput","VALIDATOR_MINLENGTH","disabled","useState","file","setFile","previewUrl","setPreviewUrl","setIsValid","filePickerRef","useRef","useEffect","fileReader","FileReader","onload","result","readAsDataURL","ref","style","display","accept","onChange","event","pickedFile","fileIsValid","target","files","length","center","src","alt","Button","onClick","current","click"],"sourceRoot":""}