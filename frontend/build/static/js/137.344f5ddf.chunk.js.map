{"version":3,"file":"static/js/137.344f5ddf.chunk.js","mappings":"mRAmIA,UAnHA,SAAqBA,GACnB,IAAMC,GAAOC,EAAAA,EAAAA,YAAWC,EAAAA,GACxB,GAAsDC,EAAAA,EAAAA,KAA9CC,EAAS,EAATA,UAAWC,EAAW,EAAXA,YAAaC,EAAK,EAALA,MAAOC,EAAU,EAAVA,WACvC,GAAsCC,EAAAA,EAAAA,UAAS,MAAK,eAA7CC,EAAW,KAAEC,EAAc,KAC5BC,GAAWC,EAAAA,EAAAA,MACXC,GAAUC,EAAAA,EAAAA,MAAYD,QAC5B,GAA+CE,EAAAA,EAAAA,GAC7C,CACEC,MAAO,CACLC,MAAO,GACPC,SAAS,GAEXC,YAAa,CACXF,MAAO,GACPC,SAAS,KAGb,GACD,eAZME,EAAS,KAAEC,EAAY,KAAEC,EAAW,MAa3CC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAU,yCAAG,kHAEYnB,EACzBoB,4BAAiC,kBAAaZ,IAC9C,KAAD,EAFKa,EAAY,OAGlBhB,EAAegB,EAAaC,OAC5BL,EACE,CACEN,MAAO,CACLC,MAAOS,EAAaC,MAAMX,MAC1BE,SAAS,GAEXC,YAAa,CACXF,MAAOS,EAAaC,MAAMR,YAC1BD,SAAS,KAGb,GACA,yGAEL,kBApBe,mCAqBhBM,GACF,GAAG,CAACnB,EAAaQ,EAASS,IAE1B,IAAMM,EAAwB,yCAAG,WAAOC,GAAK,sEACpB,OAAvBA,EAAMC,iBAAiB,kBAEfzB,EACJoB,4BAAiC,kBAAaZ,GAC9C,QACAkB,KAAKC,UAAU,CACbhB,MAAOI,EAAUa,OAAOjB,MAAMC,MAC9BE,YAAaC,EAAUa,OAAOd,YAAYF,QAE5C,CACE,eAAgB,mBAChBiB,cAAe,UAAYlC,EAAKmC,QAElC,KAAD,EACDxB,EAAS,IAAMX,EAAKoC,OAAS,WAAW,uGAE3C,gBAjB6B,sCAkB9B,OAAIhC,GAEA,gBAAKiC,UAAU,SAAQ,UACrB,SAAC,IAAc,MAKhB5B,GAAgBH,GAWnB,UAAC,EAAAgC,SAAQ,YACP,SAAC,IAAU,CAAChC,MAAOA,EAAOiC,QAAShC,KACjCH,GAAaK,IACb,kBAAM4B,UAAU,aAAaG,SAAUZ,EAAyB,WAC9D,SAAC,IAAK,CACJa,GAAG,QACHC,MAAM,QACNC,QAAQ,QACRC,KAAK,OACLC,WAAY,EAACC,EAAAA,EAAAA,OACbC,UAAU,8BACVC,QAAS3B,EACT4B,aAAc7B,EAAUa,OAAOjB,MAAMC,MACrCiC,aAAc9B,EAAUa,OAAOjB,MAAME,WAEvC,SAAC,IAAK,CACJuB,GAAG,cACHC,MAAM,cACNC,QAAQ,WACRE,WAAY,EAACM,EAAAA,EAAAA,IAAoB,IACjCJ,UAAU,oCACVC,QAAS3B,EACT4B,aAAc7B,EAAUa,OAAOd,YAAYF,MAC3CiC,aAAc9B,EAAUa,OAAOd,YAAYD,WAE7C,SAAC,IAAM,CAAC0B,KAAK,SAASQ,UAAWhC,EAAUF,QAAQ,SAAC,wBAlCxD,gBAAKmB,UAAU,SAAQ,UACrB,SAAC,IAAI,WACH,wBAAI,6BAuCd,C,4ECrHA,EARa,SAAAtC,GACX,OACE,gBAAKsC,UAAS,eAAUtC,EAAMsC,WAAagB,MAAOtD,EAAMsD,MAAM,SAC3DtD,EAAMuD,UAGb,C","sources":["Places/Pages/UpdatePlace.js","Shared/Components/UIElements/Card.js"],"sourcesContent":["import React, { Fragment, useEffect, useState, useContext } from \"react\";\r\nimport { useNavigate, useParams } from \"react-router-dom\";\r\nimport Button from \"../../Shared/Components/FormElements/Button\";\r\nimport Input from \"../../Shared/Components/FormElements/Input\";\r\nimport {\r\n  VALIDATOR_REQUIRE,\r\n  VALIDATOR_MINLENGTH,\r\n} from \"../../Shared/Util/Validators\";\r\nimport { useForm } from \"../../Shared/hooks/form-hook\";\r\nimport { useHttpClient } from \"../../Shared/hooks/http-hook\";\r\nimport { AuthContext } from \"../../Shared/Context/Auth-context\";\r\nimport \"./placeForm.css\";\r\nimport Card from \"../../Shared/Components/UIElements/Card\";\r\nimport LoadingSpinner from \"../../Shared/Components/UIElements/LoadingSpinner\";\r\nimport ErrorModal from \"../../Shared/Components/UIElements/ErrorModal\";\r\n\r\nfunction UpdatePlace(props) {\r\n  const auth = useContext(AuthContext);\r\n  const { isLoading, sendRequest, error, clearError } = useHttpClient();\r\n  const [loadedPlace, setLoadedPlace] = useState(null);\r\n  const navigate = useNavigate();\r\n  const placeId = useParams().placeId;\r\n  const [formState, inputHandler, setFormData] = useForm(\r\n    {\r\n      title: {\r\n        value: \"\",\r\n        isValid: false,\r\n      },\r\n      description: {\r\n        value: \"\",\r\n        isValid: false,\r\n      },\r\n    },\r\n    true\r\n  );\r\n  useEffect(() => {\r\n    const fetchPlace = async () => {\r\n      try {\r\n        const responseData = await sendRequest(\r\n          process.env.REACT_APP_BACKEND_URL +`/places/${placeId}`\r\n        );\r\n        setLoadedPlace(responseData.place);\r\n        setFormData(\r\n          {\r\n            title: {\r\n              value: responseData.place.title,\r\n              isValid: true,\r\n            },\r\n            description: {\r\n              value: responseData.place.description,\r\n              isValid: true,\r\n            },\r\n          },\r\n          true\r\n        );\r\n      } catch (error) {}\r\n    };\r\n    fetchPlace();\r\n  }, [sendRequest, placeId, setFormData]);\r\n\r\n  const placeUpdateSubmitHandler = async (event) => {\r\n    event.preventDefault();\r\n    try {\r\n      await sendRequest(\r\n        process.env.REACT_APP_BACKEND_URL +`/places/${placeId}`,\r\n        \"PATCH\",\r\n        JSON.stringify({\r\n          title: formState.inputs.title.value,\r\n          description: formState.inputs.description.value,\r\n        }),\r\n        {\r\n          \"Content-Type\": \"application/json\",\r\n          authorization: \"Bearer \" + auth.token,\r\n        }\r\n      );\r\n      navigate(\"/\" + auth.userId + \"/places\");\r\n    } catch (err) {}\r\n  };\r\n  if (isLoading) {\r\n    return (\r\n      <div className=\"center\">\r\n        <LoadingSpinner />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (!loadedPlace && !error) {\r\n    return (\r\n      <div className=\"center\">\r\n        <Card>\r\n          <h2>Could not find Place!</h2>\r\n        </Card>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <ErrorModal error={error} onClear={clearError} />\r\n      {!isLoading && loadedPlace && (\r\n        <form className=\"place-form\" onSubmit={placeUpdateSubmitHandler}>\r\n          <Input\r\n            id=\"title\"\r\n            label=\"Title\"\r\n            element=\"input\"\r\n            type=\"text\"\r\n            validators={[VALIDATOR_REQUIRE()]}\r\n            errorText=\"Please input a valid title.\"\r\n            onInput={inputHandler}\r\n            initialValue={formState.inputs.title.value}\r\n            initialValid={formState.inputs.title.isValid}\r\n          />\r\n          <Input\r\n            id=\"description\"\r\n            label=\"Description\"\r\n            element=\"textarea\"\r\n            validators={[VALIDATOR_MINLENGTH(5)]}\r\n            errorText=\"Please input a valid description.\"\r\n            onInput={inputHandler}\r\n            initialValue={formState.inputs.description.value}\r\n            initialValid={formState.inputs.description.isValid}\r\n          />\r\n          <Button type=\"submit\" disabled={!formState.isValid}>\r\n            UPDATE PLACE\r\n          </Button>\r\n        </form>\r\n      )}\r\n    </Fragment>\r\n  );\r\n}\r\n\r\nexport default UpdatePlace;\r\n","import React from 'react';\r\n\r\nimport './Card.css';\r\n\r\nconst Card = props => {\r\n  return (\r\n    <div className={`card ${props.className}`} style={props.style}>\r\n      {props.children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n"],"names":["props","auth","useContext","AuthContext","useHttpClient","isLoading","sendRequest","error","clearError","useState","loadedPlace","setLoadedPlace","navigate","useNavigate","placeId","useParams","useForm","title","value","isValid","description","formState","inputHandler","setFormData","useEffect","fetchPlace","process","responseData","place","placeUpdateSubmitHandler","event","preventDefault","JSON","stringify","inputs","authorization","token","userId","className","Fragment","onClear","onSubmit","id","label","element","type","validators","VALIDATOR_REQUIRE","errorText","onInput","initialValue","initialValid","VALIDATOR_MINLENGTH","disabled","style","children"],"sourceRoot":""}